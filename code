#define _CRT_SECURE_NO_WARNINGS

#include <SDL.h>
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <string.h>

const int SCREEN_WIDTH = 800;
const int SCREEN_HEIGHT = 600;

SDL_Window* gWindow = NULL;
SDL_Surface* gScreenSurface = NULL;
SDL_Surface* gHelloWorld = NULL, *gWon = NULL, *gLose = NULL;
SDL_Surface* menuNewGame = NULL, *menuExit = NULL, *menuRules = NULL, *menuAbout = NULL;
SDL_Surface* amenuNewGame = NULL, *amenuExit = NULL, *amenuRules = NULL, *amenuAbout = NULL;
SDL_Surface* Rules = NULL, *About = NULL;
SDL_Surface* textures[12];
SDL_Rect a[4][4];
int field[4][4], selected;
SDL_Rect r1 = { 0, 100, 0, 0 };
SDL_Rect r2 = { 0, 100, 0, 0 };

enum KeyPressSurfaces
{
	KEY_PRESS_SURFACE_DEFAULT,
	KEY_PRESS_SURFACE_UP,
	KEY_PRESS_SURFACE_DOWN,
	KEY_PRESS_SURFACE_LEFT,
	KEY_PRESS_SURFACE_RIGHT,
	KEY_PRESS_SURFACE_TOTAL
};

enum GameState
{
	MENU_STATE,
	GAME_STATE
} curState;

void turnRight()
{
	int tmpfield[4][4];
	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 4; j++)
			tmpfield[j][3 - i] = field[i][j];
	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 4; j++)
			field[i][j] = tmpfield[i][j];

}

void moveleft()
{
	int n1, n2, n3, n4;
	unsigned int checker = 0;
	for (int i = 0; i < 4; i++)	{
		if (field[i][0] != 0)
			n1 = 1;
		else n1 = 0;
		if (field[i][1] != 0)
			n2 = 1;
		else n2 = 0;
		if (field[i][2] != 0)
			n3 = 1;
		else n3 = 0;
		if (field[i][3] != 0)
			n4 = 1;
		else n4 = 0;
		if ((n1 + n2 + n3 + n4) == 0)
			checker = 1;
		if ((n1 + n2 + n3 + n4) == 1)
		{
			if (n1 == 1) checker = 2;
			else
				if (n2 == 1) checker = 3;
				else
					if (n3 == 1) checker = 4;
					else checker= 5;
		}
		if ((n1 + n2 + n3 + n4) == 2){
			if (n1 == 1){
				if (n2 == 1) checker = 6;
				else
					if (n3 == 1) checker = 7;
					else checker = 8;
			}
			else
				if (n2 == 1) {
					if (n3 == 1) checker = 9;
					else
						checker = 10;
				}
				else checker = 11;
		}
		if ((n1 + n2 + n3 + n4 )== 3) {
			if (n4 == 0) checker = 12;
			if (n3 == 0) checker = 13;
			if (n2 == 0) checker = 14;
			if (n1 == 0) checker = 15;
		}
		if ((n1 + n2 + n3 + n4) == 4) checker = 16;
		if (checker == 1){}
		if (checker == 2) {}
		if (checker == 3){
			field[i][0] = field[i][1];
			field[i][1] = 0;
			}
		if (checker == 4){
			field[i][0] = field[i][2];
			field[i][2] = 0;
					}
		if (checker == 5){
			field[i][0] = field[i][3];
			field[i][3] = 0;
						}
		if (checker == 6){
			if (field[i][0] == field[i][1]){
				field[i][0] = field[i][0] + 1;
				field[i][1] = 0;
								}
							}
		if (checker == 7){
			if (field[i][0] == field[i][2]){
				field[i][0] = field[i][0] + 1;
				field[i][2] = 0;
						}
			else{
				field[i][1] = field[i][2];
				field[i][2] = 0;
									}
								}
		if (checker == 8){
			if (field[i][0] == field[i][3]){
				field[i][0] = field[i][0] + 1;
				field[i][3] = 0;
										}
			else{
				field[i][1] = field[i][3];
				field[i][3] = 0;
										}
									}
		if (checker == 9){
			if (field[i][1] == field[i][2]){
				field[i][0] = field[i][1] + 1;
				field[i][1] = 0;
				field[i][2] = 0;
											}
			else{
				field[i][0] = field[i][1];
				field[i][1] = field[i][2];
				field[i][2] = 0;
			}
										}
		if (checker == 10){
			if (field[i][1] == field[i][3]){
				field[i][0] = field[i][1] + 1;
				field[i][1] = 0;
				field[i][3] = 0;
			}
			else {
				field[i][0] = field[i][1];
				field[i][1] = field[i][3];
				field[i][3] = 0;
												}
											}
		if (checker == 11){
			if (field[i][2] == field[i][3]){
				field[i][0] = field[i][2] + 1;
				field[i][2] = 0;
				field[i][3] = 0;
													}
			else{
				field[i][0] = field[i][2];
														field[i][1] = field[i][3];
														field[i][2] = 0;
														field[i][3] = 0;
													}
													
												}
		if (checker == 12){
														if (field[i][0] == field[i][1]){
															field[i][0] = field[i][0] + 1;
															field[i][1] = field[i][2];
															field[i][2] = 0;
														}
														else 
															if (field[i][1] == field[i][2]){
																field[i][1] = field[i][1] + 1;
																field[i][2] = 0;
															}
													}
		if (checker == 13){
															if (field[i][0] == field[i][1]){
																field[i][0] = field[i][0] + 1;
																field[i][1] = field[i][3];
																field[i][3] = 0;
															}
															else 
																if (field[i][1] == field[i][3]){
																	field[i][1] = field[i][1] + 1;
																	field[i][3] = 0;
																}
																else{
																	field[i][2] = field[i][3];
																	field[i][3] = 0;
																}
															
															
														}
		if (checker == 14){
																if (field[i][0] == field[i][2]){
																	field[i][0] = field[i][0] + 1;
																	field[i][1] = field[i][3];
																	field[i][3] = 0;
																}
																else
																	if (field[i][2] == field[i][3]){
																		field[i][1] = field[i][2] + 1;
																		field[i][2] = 0;
																		field[i][3] = 0;
																	}
																	else{
																		field[i][1] = field[i][2];
																		field[i][2] = field[i][3];
																		field[i][3] = 0;
																	
																}
																
															}
		if (checker == 15){
			if (field[i][1] == field[i][2]){
				field[i][0] = field[i][1] + 1;
				field[i][1] = field[i][3];
				field[i][2] = 0;
				field[i][3] = 0;
			}
			else
				if (field[i][2] == field[i][3]){
					field[i][0] = field[i][1];
					field[i][1] = field[i][2] + 1;
					field[i][2] = 0;
					field[i][3] = 0;}
				else{
					field[i][0] = field[i][1];
					field[i][1] = field[i][2];
					field[i][2] = field[i][3];
					field[i][3] = 0;}
		}
		if (checker == 16){
			if ((field[i][0] == field[i][1]) && (field[i][2] == field[i][3])){
																			field[i][0] = field[i][0] + 1;
																			field[i][1] = field[i][2] + 1;
																			field[i][2] = 0;
																			field[i][3] = 0;
																		}
																		else
																			if (field[i][0] == field[i][1]){
																				field[i][0] = field[i][0] + 1;
																				field[i][1] = field[i][2];
																				field[i][2] = field[i][3];
																				field[i][3] = 0;
																			}
																			else
																				if (field[i][1] == field[i][2]){
																					field[i][1] = field[i][1] + 1;
																					field[i][2] = field[i][3];
																					field[i][3] = 0;
																				}
																				else{
																					if (field[i][2] == field[i][3]){
																						field[i][2] = field[i][2] + 1;
																						field[i][3] = 0;

																					}
																			
																		
																		}
																		
																	}

			}
		}


bool addRandom()
{
	int ammount = 0;
	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 4; j++)
			if (!field[i][j]) ammount++;
	if (ammount == 0) return false;
	int chosen = rand() % ammount + 1;
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
			if (!field[i][j])
			{
				chosen--;
				if (chosen == 0)
				{
					int tmp = rand() % 10;
					field[i][j] = tmp == 9 ? 2 : 1;
					break;
				}
			}
		if (chosen == 0) break;
	}
	return true;
}

void movedown()
{
	turnRight();
	moveleft();
	turnRight();
	turnRight();
	turnRight();
}

void moveup()
{
	turnRight();
	turnRight();
	turnRight();
	moveleft();
	turnRight();

}

void moveright()
{

	turnRight();
	turnRight();
	moveleft();
	turnRight();
	turnRight();
}

void new_field(){

	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 4; j++)
			field[i][j] = 0;
	int i1 = rand() % 4, j1 = rand() % 4;
	int tmp = rand() % 10;
	if (tmp == 9)
		field[i1][j1] = 2;
	else
		field[i1][j1] = 1;
	int i2 = rand() % 4, j2 = rand() % 4;
	tmp = rand() % 10;
	while ((i1 == i2) && (j1 == j2)){
		i2 = rand() % 4;
		j2 = rand() % 4;
		if (tmp == 9)
			field[i2][j2] = 2;
		else
			field[i2][j2] = 1;
	}
}

bool init()
{
	selected = 0;
	curState = MENU_STATE;
	srand(time(NULL));
	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 4; j++)
		{
			a[i][j] = { 200 + 10 + 10 * j + 90 * j, 100 + 10 + 10 * i + 90 * i, 90, 90 };
			field[i][j] = 0;
		}
	bool success = true;
	if (SDL_Init(SDL_INIT_VIDEO) < 0)
	{
		printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
		success = false;
	}
	else
	{
		gWindow = SDL_CreateWindow("SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
		if (gWindow == NULL)
		{
			printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
			success = false;
		}
		else
		{
			gScreenSurface = SDL_GetWindowSurface(gWindow);
		}
	}
	return success;
}

bool loadMedia()
{
	bool success = true;
	gHelloWorld = SDL_LoadBMP("hello_world.bmp");
	char s1[50] = "texture";
	char s2[50] = ".bmp";
	char s3[50];
	char s4[50];
	char *foo = "texture";
	char *bar = ".bmp";
	char str[80];
	char str1[15];
	for (int i = 1; i < 12; i++)
	{
		str1[0] = str[0] = 0;
		strcpy(str, "texture");
		sprintf(str1, "%d", i);
		strcat(str, str1);
		strcat(str, bar);
		textures[i] = SDL_LoadBMP(str);
	}
	gWon = SDL_LoadBMP("won.bmp");
	gLose = SDL_LoadBMP("lose.bmp");
	menuNewGame = SDL_LoadBMP("new_game.bmp");
	amenuNewGame = SDL_LoadBMP("anew_game.bmp");
	menuExit = SDL_LoadBMP("exit.bmp");
	amenuExit = SDL_LoadBMP("aexit.bmp");
	menuAbout = SDL_LoadBMP("about.bmp");
	amenuAbout = SDL_LoadBMP("aabout.bmp");
	menuRules = SDL_LoadBMP("rules.bmp");
	amenuRules = SDL_LoadBMP("arules.bmp");
	About = SDL_LoadBMP("menuAbout.bmp");
	Rules = SDL_LoadBMP("menuRules.bmp");
	if (gHelloWorld == NULL)
	{
		printf("Unable to load image %s! SDL Error: %s\n", "02_getting_an_image_on_the_screen/hello_world.bmp", SDL_GetError());
		success = false;
	}
	return success;
}

void close()
{
	SDL_FreeSurface(gHelloWorld);
	gHelloWorld = NULL;
	SDL_DestroyWindow(gWindow);
	gWindow = NULL;
	for (int i = 1; i < 12; i++)
	{
		SDL_FreeSurface(textures[i]);
		textures[i] = NULL;
	}
	SDL_Quit();
}

bool won()
{
	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 4; j++)
			if (field[i][j] == 11)
				return true;
	return false;
}

int main(int argc, char* args[])
{
	SDL_Rect newGameRect = { 100, 100, 0, 0 },
		aboutRect = { 100, 200, 0, 0 },
		rulesRect = { 100, 300, 0, 0 },
		exitRect = { 100, 400, 0, 0 };
	bool res = true;
	if (!init())
	{
		printf("Failed while initializing.\n");
	}
	else
	{
		if (!loadMedia())
		{
			printf("Failed to load resources.\n");
		}
		else
		{
			SDL_Event e;
			SDL_Rect rect = { 0, 0, 90, 90 }, bgRect = { 200, 100, 410, 410 };
			Uint32 bgColor1 = SDL_MapRGB(gScreenSurface->format, 0xFA, 0xF8, 0xEF),
				bgColor2 = SDL_MapRGB(gScreenSurface->format, 0xBB, 0xAD, 0xA0),
				color = SDL_MapRGB(gScreenSurface->format, 0xCC, 0xC0, 0xC3);
			while (true)
			{
				switch (curState)
				{
				case GAME_STATE:
				{
				
				SDL_Event laste;
				while (SDL_PollEvent(&laste) != 0)
					{
						if (laste.type == SDL_QUIT)
						{
							close();
							return 0;
						}
						else if (laste.type == SDL_KEYUP &&
							((laste.key.keysym.sym == SDLK_UP) ||
							(laste.key.keysym.sym == SDLK_DOWN) ||
							(laste.key.keysym.sym == SDLK_LEFT) ||
							(laste.key.keysym.sym == SDLK_RIGHT)))
						{
							switch (laste.key.keysym.sym)
							{
							case SDLK_UP:
								printf("You pushed up\n");
								moveup();
								res = addRandom();
								break;

							case SDLK_DOWN:
								printf("You pushed down\n");
								movedown();
								res = addRandom();
								break;

							case SDLK_LEFT:
								printf("You pushed left\n");
								moveleft();
								res = addRandom();
								break;

							case SDLK_RIGHT:
								printf("You pushed right\n");
								moveright();
								res = addRandom();
								break;

							default:
								printf("You released something");
								break;
							}
						}
						if (!res)
						{
							SDL_Rect r = { 0, 100, 0, 0 };
							SDL_BlitSurface(gLose, NULL, gScreenSurface, &r);
							SDL_UpdateWindowSurface(gWindow);
							SDL_Delay(5000);
							selected = 0;
							curState = MENU_STATE;
							break;
						}
						SDL_FillRect(gScreenSurface, NULL, bgColor1);
						SDL_FillRect(gScreenSurface, &bgRect, bgColor2);
						for (int i = 0; i < 4; i++)
							for (int j = 0; j < 4; j++)
							{

								SDL_FillRect(gScreenSurface, &(a[i][j]), color);
								if (field[i][j] > 0)
									SDL_BlitSurface(textures[field[i][j]], NULL, gScreenSurface, &(a[i][j]));
							}
						SDL_UpdateWindowSurface(gWindow);
						if (won())
						{
							SDL_Rect r = { 0, 100, 0, 0 };
							SDL_BlitSurface(gWon, NULL, gScreenSurface, &r);
							SDL_UpdateWindowSurface(gWindow);
							SDL_Delay(5000);
							selected = 0;
							curState = MENU_STATE;
							break;
						}
						SDL_Delay(100);
					}
					break;
				}
				case MENU_STATE:
				{
					while (SDL_PollEvent(&e) != 0){
						if (e.type == SDL_QUIT)
						{
							close();
							return 0;
						}
						else
							if (e.type == SDL_KEYUP &&
								((e.key.keysym.sym == SDLK_UP) ||
								(e.key.keysym.sym == SDLK_DOWN) ||
								(e.key.keysym.sym == SDLK_RETURN)))
							{
								switch (e.key.keysym.sym)
								{
								case SDLK_DOWN:
									printf("You pushed up\n");
									selected = (selected + 1) % 4;
									break;

								case SDLK_UP:
									printf("You pushed down\n");
									selected--;
									if (selected < 0) selected = 3;
									break;
								case SDLK_RETURN:
									switch (selected)
									{
									case 0:
										new_field();
										res = true;
										curState = GAME_STATE;
										break;
									case 1:
										SDL_BlitSurface(About, NULL, gScreenSurface, &r1);
										SDL_UpdateWindowSurface(gWindow);
										SDL_Delay(10000);
										selected = 0;
										curState = MENU_STATE;
										break;
									case 2:
										SDL_BlitSurface(Rules, NULL, gScreenSurface, &r2);
										SDL_UpdateWindowSurface(gWindow);
										SDL_Delay(10000);
										selected = 0;
										curState = MENU_STATE;
										break;
									case 3:
										close();
										return 0;
										break;
									}
									break;

								default:
									printf("You released something");
									break;
								}
							}
						}

						SDL_FillRect(gScreenSurface, NULL, SDL_MapRGB(gScreenSurface->format, 0xFF, 0xFF, 0xFF));
						SDL_BlitSurface(menuNewGame, NULL, gScreenSurface, &newGameRect);
						SDL_BlitSurface(menuAbout, NULL, gScreenSurface, &aboutRect);
						SDL_BlitSurface(menuExit, NULL, gScreenSurface, &exitRect);
						SDL_BlitSurface(menuRules, NULL, gScreenSurface, &rulesRect);
						switch (selected)
						{
						case 0:
							SDL_BlitSurface(amenuNewGame, NULL, gScreenSurface, &newGameRect);
							break;
						case 1:
							SDL_BlitSurface(amenuAbout, NULL, gScreenSurface, &aboutRect);
							break;
						case 2:
							SDL_BlitSurface(amenuRules, NULL, gScreenSurface, &rulesRect);
							break;
						case 3:
							SDL_BlitSurface(amenuExit, NULL, gScreenSurface, &exitRect);
							break;
						}
						SDL_UpdateWindowSurface(gWindow);

	
					break; }
				}
			}
		}
	}
		close();
		return 0;
	}
